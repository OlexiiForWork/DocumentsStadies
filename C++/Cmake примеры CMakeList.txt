cmake_minimum_required(VERSION 3.13.0 FATAL_ERROR) 

# Project name
#Варианты
project(SIGTest)
project(SIGTest CXX)

project(MyProject NONE)
enable_language(CXX)

set(PROJECT_NAME_TARGET SIGTest)
project(${PROJECT_NAME_TARGET})

#Вывод собщений и создание опций
option(USE_STATIC "USE STATIC libary" ON)
message(STATUS "USE_STATIC: ${USE_STATIC}")

#Вывод собщений
message(STATUS PROJECT_NAME: ${PROJECT_NAME}) 
message(STATUS "OS: ${CMAKE_SYSTEM_NAME}")
message(STATUS "CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
message(STATUS "CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION}")
message(STATUS "CMAKE_HOST_SYSTEM_NAME: ${CMAKE_HOST_SYSTEM_NAME}")
message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "CMAKE_GENERATOR_PLATFORM: ${CMAKE_GENERATOR_PLATFORM}")
message(STATUS "CMAKE_SYSROOT: ${CMAKE_SYSROOT}")
message(STATUS "CMAKE_STAGING_PREFIX: ${CMAKE_STAGING_PREFIX}")

message(STATUS "CMAKE_BINARY_DIR: ${CMAKE_BINARY_DIR}")
message(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")


# В одном файле можно несколько экзешников собрать 
# SIGTestProject.exe SIGTestProject1.exe
# И собрать DLL

#add_executable(<name> [WIN32] [MACOSX_BUNDLE]
#              [EXCLUDE_FROM_ALL]
#              [source1] [source2 ...])
add_executable(SIGTestProject main.cpp)
add_executable(SIGTestProject1 main.cpp)

# add_library(<target> [STATIC | SHARED | MODULE]
#            [EXCLUDE_FROM_ALL]
#            [<source>...])
add_library(SIGTestProject_lib main.cpp)
add_library(SIGTestProject1_lib main.cpp) 

#add_library(objlib OBJECT [<source>...])
#add_library(... $<TARGET_OBJECTS:objlib> ...)
#add_executable(... $<TARGET_OBJECTS:objlib> ...)
# set_target_properties(
#         SIGTestProject PROPERTIES
#         CXX_STANDARD 11
#         CXX_STANDARD_REQUIRED ON
# )

#Добавить директорию к таргету( либе екзешнику )
#target_include_directories(<target> [SYSTEM] [AFTER|BEFORE]
#  <INTERFACE|PUBLIC|PRIVATE> [items1...]
# [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

#target_include_directories(mylib PUBLIC
#  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/mylib>
#  $<INSTALL_INTERFACE:include/mylib>  # <prefix>/include/mylib
#)

#Для всех либ и екзешников
#include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])

#target_link_options(<target> [BEFORE]
#  <INTERFACE|PUBLIC|PRIVATE> [items1...]
#  [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])

#target_sources(<target>
#  [<INTERFACE|PUBLIC|PRIVATE>
#   [FILE_SET <set> [TYPE <type>] [BASE_DIRS <dirs>...] [FILES <files>...]]...
#  ]...)

# Или статическу библиотеку
if(USE_STATIC)
    add_library(${PROJECT_NAME}-a STATIC $<TARGET_OBJECTS:${PROJECT_NAME}-objs>)
    target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}-a)
else()
    add_library(${PROJECT_NAME}-so SHARED $<TARGET_OBJECTS:${PROJECT_NAME}-objs>)
    target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}-so)
endif()

# Или статическу библиотеку
# if(USE_STATIC)
#     add_library(mylib-a STATIC $<TARGET_OBJECTS:${PROJECT_NAME}-objs>)
#     target_link_libraries(${PROJECT_NAME} mylib-a)
# else()
#     add_library(mylib-so SHARED $<TARGET_OBJECTS:${PROJECT_NAME}-objs>)
#     target_link_libraries(${PROJECT_NAME} mylib-so)
# endif()

# BUILD_SHARED_LIBS использовать -DBUILD_SHARED_LIBS=YES
# Если не указывать add_library(mylib-so SHARED) то можна устанавливать 
# через BUILD_SHARED_LIBS( YES = SHARED  / NO = STATIC   )
# add_library(mylib-a STATIC $<TARGET_OBJECTS:${PROJECT_NAME}-objs>)